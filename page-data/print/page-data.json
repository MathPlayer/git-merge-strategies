{"componentChunkName":"component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/print","result":{"data":{"deck":{"id":"af2512e6-842c-5a69-9f0f-b66f42059890","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar theme = themes.notes;\nvar _frontmatter = {};\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Git Merging\"), mdx(\"p\", null, \"Navigatino with left and right keys\"), mdx(\"hr\", null), mdx(\"h3\", null, \"Types of merging\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Merge commit\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Rebase\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Squash\")), mdx(\"hr\", null), mdx(\"h2\", null, \"No Fast Forward Merge\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Will always result in a merge commit\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Doesn't matter if anything else has been merged in the meantime\")), mdx(NoFastForwardExamples, {\n    mdxType: \"NoFastForwardExamples\"\n  }), mdx(\"hr\", null), mdx(\"h2\", null, \"Fast Forward\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Will never leave a merge commit\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Can only be done if no other work has been merged\")), mdx(FastForwardExamples, {\n    mdxType: \"FastForwardExamples\"\n  }), mdx(\"hr\", null), mdx(\"h2\", null, \"Squash & Merge\"), mdx(Merge, {\n    mdxType: \"Merge\"\n  }), mdx(\"hr\", null), mdx(\"h2\", null, \"Rebase\"), mdx(Rebase, {\n    mdxType: \"Rebase\"\n  }), mdx(\"hr\", null), mdx(\"h2\", null, \"Comparisons\"), mdx(\"hr\", null), mdx(\"h3\", null, \"Fast forward vs no fast forward\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Requiring fast forward merges guarentees that the tests have been run against the code that will eventually be master\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Requiring fast forward merges means that all PRs need to be rebased and rebuilt after any other merge\")), mdx(\"hr\", null), mdx(\"h3\", null, \"Squashing\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Loses commit information and so makes it harder for git to resolve conflicts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If combined with fast forwarding it keeps the master branch linear\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Obvious place where PRs are merged\")), mdx(\"hr\", null), mdx(\"h3\", null, \"Rebasing\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Keeps the master branch linear. Leaves all the commits from the feature branch on the master branch\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"No obvious place where PRs are merged\")), mdx(\"hr\", null), mdx(\"h3\", null, \"Merge commit\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Keeps the master branch clean (single commit for a whole piece of work) but not linear\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Keeps all commit history\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Obvious place where PRs are merged\")), mdx(\"hr\", null), mdx(\"h2\", null, \"The End\"));\n}\n;\nMDXContent.isMDXComponent = true;","title":"Git Merging"}},"pageContext":{"id":"af2512e6-842c-5a69-9f0f-b66f42059890","slug":"/git-merge-strategies","title":"Git Merging"}},"staticQueryHashes":[]}